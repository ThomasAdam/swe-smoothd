Index: swe3-smoothd/Makefile
===================================================================
--- swe3-smoothd.orig/Makefile	2010-08-28 19:47:28.000000000 +0100
+++ swe3-smoothd/Makefile	2010-08-28 19:49:44.000000000 +0100
@@ -10,7 +10,7 @@
 MODULES = sysshutdown sysinstall sysim sysp3scan sysalcatel sysdhcpd sysdnsproxy \
 	sysntpd syssnort syssquid syssshd sysupnpd sysadvnet sysipblock \
 	sysxtaccess sysupdown sysipsec systimeset sysiptables systraffic syssip sysclamav \
-	systimedaccess
+	systimedaccess syshost
 
 MODULEFLAGS = $(CXXFLAGS) -shared -fPIC -o $@.so $@.cpp $(LIBS)
 
@@ -89,6 +89,8 @@
 	$(CXX) $(MODULEFLAGS)
 systimedaccess : $(OBJS)
 	$(CXX) $(MODULEFLAGS)
+syshost : $(OBJS)
+	$(CXX) $(MODULEFLAGS)
 
 ipbatchc.o: ipbatch.h 
 	$(CC) -c $(CFLAGS) -DIPTABLES_VERSION=\"$(IPTABLES_VER)\" -Wall -Wunused -I$(KERNEL_DIR)/include -I$(IPTABLES_SRC_DIR)/include/ -I. -DIPT_LIB_DIR=\"$(IPT_LIB_DIR)\"  ipbatchc.c 
Index: swe3-smoothd/syshost.cpp
===================================================================
--- swe3-smoothd.orig/syshost.cpp	2010-08-28 19:47:28.000000000 +0100
+++ swe3-smoothd/syshost.cpp	2010-08-28 19:50:28.000000000 +0100
@@ -31,9 +31,9 @@
 int load(std::vector<CommandFunctionPair> & pairs)
 {
 	/* CommandFunctionPair name("command", "function"); */
-	CommandFunctionPair set_host("sethost", "set_host", 0, 0);
+	CommandFunctionPair set_host_function("sethost", "set_host", 0, 0);
 	
-	pairs.push_back(set_host);
+	pairs.push_back(set_host_function);
 
 	return (0);
 }
Index: swe3-smoothd/sysim.cpp
===================================================================
--- swe3-smoothd.orig/sysim.cpp	2010-08-28 19:47:28.000000000 +0100
+++ swe3-smoothd/sysim.cpp	2010-08-28 20:00:01.000000000 +0100
@@ -26,6 +26,7 @@
 	int restart_im(std::vector<std::string> & parameters, std::string & response);
 	int   start_im(std::vector<std::string> & parameters, std::string & response);
 	int    stop_im(std::vector<std::string> & parameters, std::string & response);
+    int write_im_config(std::vector<std::string> & parameters, std::string & response);
 }
 
 int load(std::vector<CommandFunctionPair> & pairs)
@@ -34,14 +35,31 @@
 	CommandFunctionPair restart_im_function("imrestart", "restart_im", 0, 0);
 	CommandFunctionPair   start_im_function("imstart",     "start_im", 0, 0);
 	CommandFunctionPair    stop_im_function("imstop",       "stop_im", 0, 0);
+	CommandFunctionPair    write_im_config_function("write_im_config", "write_im_config", 0, 0);
 
 	pairs.push_back(restart_im_function);
 	pairs.push_back(  start_im_function);
 	pairs.push_back(   stop_im_function);
+    pairs.push_back( write_im_config_function );
 
 	return 0;
 }
 
+int write_im_config(std::vector<std::string> & parameters, std::string & response)
+{
+    int error = 0;
+    const char *cmd = "/usr/share/swe3/bin/writeim.pl";
+
+    error = simplesecuresysteml( cmd );
+
+    if( error )
+        response = "Couldn't write out IMSpector config file.";
+    else
+        response = "Ran IMSPector config writer successfully.";
+
+    return error;
+}
+
 int restart_im(std::vector<std::string> & parameters, std::string & response)
 {
 	int error = 0;
Index: swe3-smoothd/sysdhcpd.cpp
===================================================================
--- swe3-smoothd.orig/sysdhcpd.cpp	2010-08-28 19:47:28.000000000 +0100
+++ swe3-smoothd/sysdhcpd.cpp	2010-08-28 20:08:28.000000000 +0100
@@ -26,6 +26,7 @@
 	int restart_dhcpd(std::vector<std::string> & parameters, std::string & response);
 	int start_dhcpd(std::vector<std::string> & parameters, std::string & response);
 	int stop_dhcpd(std::vector<std::string> & parameters, std::string & response);
+    int write_dhcpd_config(std::vector<std::string> & parameters, std::string & response);
 }
 
 int load(std::vector<CommandFunctionPair> & pairs)
@@ -34,14 +35,32 @@
 	CommandFunctionPair restart_dhcpd_function("dhcpdrestart", "restart_dhcpd", 0, 0);
 	CommandFunctionPair start_dhcpd_function("dhcpdstart", "start_dhcpd", 0, 0);
 	CommandFunctionPair stop_dhcpd_function("dhcpdstop", "stop_dhcpd", 0, 0);
+    CommandFunctionPair write_dhcpd_config_function("write_dhcpd_config", "write_dhcpd_config", 0, 0);
 
 	pairs.push_back(restart_dhcpd_function);
 	pairs.push_back(start_dhcpd_function);
 	pairs.push_back(stop_dhcpd_function);
+    pairs.push_back(write_dhcpd_config_function);
 
 	return 0;
 }
 
+int write_dhcpd_config(std::vector<std::string> & parameters, std::string & response)
+{
+    int error = 0;
+
+    const char *cmd = "/usr/share/swe3/bin/writedhcp.pl";
+
+    error = simplesecuresysteml( cmd );
+
+    if( error )
+        response = "Couldn't run DHCPD config writer.";
+    else
+        response = "Ran DHCPD config writer successfully.";
+
+    return error;
+}
+
 int restart_dhcpd(std::vector<std::string> & parameters, std::string & response)
 {
 	int error = 0;
Index: swe3-smoothd/sysp3scan.cpp
===================================================================
--- swe3-smoothd.orig/sysp3scan.cpp	2010-08-28 19:47:28.000000000 +0100
+++ swe3-smoothd/sysp3scan.cpp	2010-08-28 20:20:18.000000000 +0100
@@ -34,12 +34,30 @@
 	CommandFunctionPair restart_p3scan_function("p3scanrestart", "restart_p3scan", 0, 0);
 	CommandFunctionPair   start_p3scan_function("p3scanstart",     "start_p3scan", 0, 0);
 	CommandFunctionPair    stop_p3scan_function("p3scanstop",       "stop_p3scan", 0, 0);
+	CommandFunctionPair    write_p3scan_config_function("write_p3scan_config", "write_p3scan_config", 0, 0);
 
-	pairs.push_back(restart_p3scan_function);
+    pairs.push_back(restart_p3scan_function);
 	pairs.push_back(  start_p3scan_function);
 	pairs.push_back(   stop_p3scan_function);
+    pairs.push_back( write_p3scan_config_function );
 
-	return 0;
+    return 0;
+}
+
+int write_p3scan_config(std::vector<std::string> & parameters, std::string & response)
+{
+    int error = 0;
+
+    const char* cmd = "/usr/share/swe3/perl/writep3scan.pl";
+
+    error = simplesecuresysteml( cmd );
+
+    if( error )
+        response = "Couldn't run p3scan config writer.";
+    else
+        response = "Successfully ran p3scan config writer.";
+
+    return error;
 }
 
 int restart_p3scan(std::vector<std::string> & parameters, std::string & response)
Index: swe3-smoothd/syssquid.cpp
===================================================================
--- swe3-smoothd.orig/syssquid.cpp	2010-08-28 19:47:29.000000000 +0100
+++ swe3-smoothd/syssquid.cpp	2010-08-28 20:33:35.000000000 +0100
@@ -26,6 +26,7 @@
 	int restart_squid(std::vector<std::string> & parameters, std::string & response);
 	int start_squid(std::vector<std::string> & parameters, std::string & response);
 	int stop_squid(std::vector<std::string> & parameters, std::string & response);
+	int write_proxy_config(std::vector<std::string> & parameters, std::string & response);
 }
 
 int load(std::vector<CommandFunctionPair> & pairs)
@@ -34,14 +35,31 @@
 	CommandFunctionPair restart_squid_function("squidrestart", "restart_squid", 0, 0);
 	CommandFunctionPair start_squid_function("squidstart", "start_squid", 0, 0);
 	CommandFunctionPair stop_squid_function("squidstop", "stop_squid", 0, 0);
+	CommandFunctionPair write_proxy_config_function("write_proxy_config", "write_proxy_config", 0, 0);
 
 	pairs.push_back(restart_squid_function);
 	pairs.push_back(start_squid_function);
 	pairs.push_back(stop_squid_function);
+	pairs.push_back(write_proxy_config_function);
 
 	return 0;
 }
 
+int write_proxy_config(std::vector<std::string> & parameters, std::string & response)
+{
+    int error = 0;
+    const char* cmd = "/usr/share/swe3/bin/writeproxy.pl";
+
+    error = simplesecuresysteml( cmd );
+
+    if( error )
+        response = "Couldn't run proxy config writer.";
+    else
+        response = "Successfully ran proxy config writer.";
+
+    return error;
+}
+
 int restart_squid(std::vector<std::string> & parameters, std::string & response)
 {
 	int error = 0;
Index: swe3-smoothd/syssip.cpp
===================================================================
--- swe3-smoothd.orig/syssip.cpp	2010-08-28 19:47:28.000000000 +0100
+++ swe3-smoothd/syssip.cpp	2010-08-28 20:54:44.000000000 +0100
@@ -27,6 +27,7 @@
 	int restart_sip( std::vector<std::string> & parameters, std::string & response );
 	int   start_sip( std::vector<std::string> & parameters, std::string & response );
 	int    stop_sip( std::vector<std::string> & parameters, std::string & response );
+	int write_sip_config( std::vector<std::string> & parameters, std::string & response );
 }
 
 int load( std::vector<CommandFunctionPair> & pairs )
@@ -35,14 +36,31 @@
 	CommandFunctionPair restart_sip_function( "siprestart", "restart_sip", 0, 0 );
 	CommandFunctionPair   start_sip_function( "sipstart",     "start_sip", 0, 0 );
 	CommandFunctionPair    stop_sip_function( "sipstop",       "stop_sip", 0, 0 );
+	CommandFunctionPair    write_sip_config_function( "write_sip_config", "write_sip_config", 0, 0 );
 
 	pairs.push_back( restart_sip_function );
 	pairs.push_back(   start_sip_function );
 	pairs.push_back(    stop_sip_function );
+    pairs.push_back( write_sip_config_function );
 
 	return ( 0 );
 }
 
+int write_sip_config( std::vector<std::string> & parameters, std::string & response )
+{
+    int error = 0;
+    const char* cmd = "/usr/share/swe3/bin/writesipproxdconf.pl";
+
+    error = simplesecuresysteml( cmd );
+
+    if( error )
+        response = "Couldn't run sip proxy config writer.";
+    else
+        response = "Successfully ran sip proxy config writer.";
+
+    return error;
+}
+
 int restart_sip( std::vector<std::string> & parameters, std::string & response )
 {
 	int error = 0;
Index: swe3-smoothd/sysntpd.cpp
===================================================================
--- swe3-smoothd.orig/sysntpd.cpp	2010-08-28 19:47:28.000000000 +0100
+++ swe3-smoothd/sysntpd.cpp	2010-08-28 21:06:47.000000000 +0100
@@ -26,6 +26,7 @@
 	int restart_ntpd( std::vector<std::string> & parameters, std::string & response );
 	int start_ntpd( std::vector<std::string> & parameters, std::string & response );
 	int stop_ntpd( std::vector<std::string> & parameters, std::string & response );
+	int write_ntpd_config( std::vector<std::string> & parameters, std::string & response );
 }
 
 int load( std::vector<CommandFunctionPair> & pairs )
@@ -34,14 +35,31 @@
 	CommandFunctionPair restart_ntpd_function("ntpdrestart", "restart_ntpd", 0, 0 );
 	CommandFunctionPair start_ntpd_function("ntpdstart", "start_ntpd", 0, 0 );
 	CommandFunctionPair stop_ntpd_function("ntpdstop", "stop_ntpd", 0, 0 );
+	CommandFunctionPair write_ntpd_config_function("write_ntpd_config", "write_ntpd_config", 0, 0 );
 
 	pairs.push_back(restart_ntpd_function );
 	pairs.push_back(start_ntpd_function );
 	pairs.push_back(stop_ntpd_function );
+    pairs.push_back(write_ntpd_config_function );
 
 	return 0;
 }
 
+int write_ntpd_config( std::vector<std::string> & parameters, std::string & response )
+{
+    int error = 0;
+    const char *cmd = "/usr/share/swe3/bin/writentpd.pl";
+
+    error = simplesecuresysteml( cmd );
+
+    if( error )
+        response = "Couldn't run ntpd config writer.";
+    else
+        response = "Successfully ran ntpd config writer.";
+
+    return error;
+}
+
 int restart_ntpd( std::vector<std::string> & parameters, std::string & response )
 {
 	int error = 0;
Index: swe3-smoothd/sysipsec.cpp
===================================================================
--- swe3-smoothd.orig/sysipsec.cpp	2010-08-28 19:47:28.000000000 +0100
+++ swe3-smoothd/sysipsec.cpp	2010-08-28 21:28:21.000000000 +0100
@@ -26,6 +26,7 @@
 	int restart_ipsec(std::vector<std::string> & parameters, std::string & response);
 	int start_ipsec(std::vector<std::string> & parameters, std::string & response);
 	int stop_ipsec(std::vector<std::string> & parameters, std::string & response);
+	int write_ipsec_config(std::vector<std::string> & parameters, std::string & response);
 }
 
 int load(std::vector<CommandFunctionPair> & pairs)
@@ -34,14 +35,31 @@
 	CommandFunctionPair restart_ipsec_function("ipsecrestart", "restart_ipsec", 0, 0);
 	CommandFunctionPair start_ipsec_function("ipsecstart", "start_ipsec", 0, 0);
 	CommandFunctionPair stop_ipsec_function("ipsecstop", "stop_ipsec", 0, 0);
+	CommandFunctionPair write_ipsec_config_function("write_ipsec_config", "write_ipsec_config", 0, 0);
 
 	pairs.push_back(restart_ipsec_function);
 	pairs.push_back(start_ipsec_function);
 	pairs.push_back(stop_ipsec_function);
+    pairs.push_back(write_ipsec_config_function);
 
 	return 0;
 }
 
+int write_ipsec_config(std::vector<std::string> & parameters, std::string & response)
+{
+    int error = 0;
+    const char* cmd = "/usr/share/swe3/writeipsec.pl";
+
+    error = simplesecuresysteml( cmd, NULL );
+
+    if( error )
+        response = "Couldn't run ipsec config writer.";
+    else
+        response = "Successfully ran ipsec config writer.";
+
+    return error;
+}
+
 int restart_ipsec(std::vector<std::string> & parameters, std::string & response)
 {
 	int error = 0;
